// This is a conceptual representation of a Next.js application structure.
// In a real Next.js project, these would be separate files in the directories indicated by the comments.
// We'll use a simple state to simulate page navigation within this single component.

import React, { useState, useEffect, createContext, useContext } from 'react';
// In a real Next.js app, you'd install these:
// npm install lucide-react recharts
// For this example, we'll use placeholder icons or simple SVGs if lucide-react is not available.
// Let's assume lucide-react icons are available for this example.
// If not, replace with simple text or SVG.
import { LayoutDashboard, ShoppingCart, CreditCard, TrendingUp, CalendarPlus, History, Settings, LogOut, ChevronDown, UserCircle, Utensils, Gift, Star } from 'lucide-react';

// Tailwind CSS is assumed to be set up in a real Next.js project (globals.css and tailwind.config.js)
// For this example, styles will be inline or rely on Tailwind classes.

// --- types/index.ts (or individual files like types/points.ts) ---
interface Transaction {
  id: string;
  date: string;
  description: string;
  amount: number;
  type: 'earn' | 'spend';
  category: string; // e.g., "Breakfast", "Lunch", "Snacks"
  location: string; // e.g., "Main Cafeteria", "Cafe Bytes"
}

interface PointsData {
  currentBalance: number;
  transactions: Transaction[];
}

interface Order {
  id: string;
  itemName: string;
  quantity: number;
  scheduledTime: string; // ISO string
  pickupLocation: string;
  status: 'Pending' | 'Confirmed' | 'Ready' | 'Picked Up' | 'Cancelled';
}

interface WrappedStat {
  title: string;
  value: string | number;
  description?: string;
  icon?: React.ReactNode;
}

interface DiningWrappedData {
  totalSpent: number;
  mostFrequentLocation: string;
  favoriteItem: string; // Simplified
  peakSpendingTime: string; // e.g., "Lunch Rush (12-1 PM)"
  totalOrders: number;
  uniqueItemsTried: number;
  stats: WrappedStat[];
}

// --- lib/api/points.ts ---
const mockPointsAPI = {
  getPointsData: async (): Promise<PointsData> => {
    return new Promise((resolve) =>
      setTimeout(() => {
        resolve({
          currentBalance: 1250.75,
          transactions: [
            { id: 't1', date: '2025-05-12', description: 'Morning Coffee & Bagel', amount: -7.50, type: 'spend', category: 'Breakfast', location: 'Cafe Bytes' },
            { id: 't2', date: '2025-05-11', description: 'Lunch Special', amount: -12.00, type: 'spend', category: 'Lunch', location: 'Main Cafeteria' },
            { id: 't3', date: '2025-05-10', description: 'Points Top-up', amount: 50.00, type: 'earn', category: 'Top-up', location: 'Online Portal' },
            { id: 't4', date: '2025-05-09', description: 'Dinner Set', amount: -15.25, type: 'spend', category: 'Dinner', location: 'Main Cafeteria' },
            { id: 't5', date: '2025-05-08', description: 'Snack Bar', amount: -4.50, type: 'spend', category: 'Snacks', location: 'Vending Machine C' },
          ],
        });
      }, 500)
    );
  },
};

// --- lib/api/orders.ts ---
const mockOrdersAPI = {
  getScheduledOrders: async (): Promise<Order[]> => {
    return new Promise((resolve) =>
      setTimeout(() => {
        resolve([
          { id: 'o1', itemName: 'Veggie Burger Meal', quantity: 1, scheduledTime: new Date(Date.now() + 3600 * 1000 * 2).toISOString(), pickupLocation: 'Main Cafeteria', status: 'Confirmed' },
          { id: 'o2', itemName: 'Large Pepperoni Pizza', quantity: 1, scheduledTime: new Date(Date.now() + 3600 * 1000 * 24).toISOString(), pickupLocation: 'Pizza Spot', status: 'Pending' },
        ]);
      }, 500)
    );
  },
  scheduleNewOrder: async (newOrder: Omit<Order, 'id' | 'status'>): Promise<Order> => {
    return new Promise((resolve) =>
      setTimeout(() => {
        resolve({
          id: `o${Math.floor(Math.random() * 1000)}`,
          ...newOrder,
          status: 'Pending',
        });
      }, 500)
    );
  },
};

// --- lib/api/wrapped.ts ---
const mockWrappedAPI = {
  getDiningWrappedData: async (): Promise<DiningWrappedData> => {
    return new Promise((resolve) =>
      setTimeout(() => {
        resolve({
          totalSpent: 478.50,
          mostFrequentLocation: 'Main Cafeteria',
          favoriteItem: 'Chicken Sandwich',
          peakSpendingTime: 'Lunch (12-1 PM)',
          totalOrders: 52,
          uniqueItemsTried: 15,
          stats: [
            { title: "Total Spent", value: "$478.50", description: "Across all dining halls", icon: <CreditCard size={24} /> },
            { title: "Go-To Spot", value: "Main Cafeteria", description: "Your most visited place", icon: <Utensils size={24} /> },
            { title: "Favorite Item", value: "Chicken Sandwich", description: "You ordered this the most!", icon: <Star size={24} /> },
            { title: "Busiest Time", value: "Lunch (12-1 PM)", description: "When you fuel up most often", icon: <CalendarPlus size={24} /> },
            { title: "Total Orders", value: 52, description: "You're a regular!", icon: <ShoppingCart size={24} /> },
            { title: "Explorer Score", value: "15 items", description: "New flavors you've tried", icon: <Gift size={24} /> },
          ]
        });
      }, 700)
    );
  },
};


// --- components/common/Navbar.tsx ---
interface NavbarProps {
  setCurrentPage: (page: string) => void;
  currentPage: string;
}
const Navbar: React.FC<NavbarProps> = ({ setCurrentPage, currentPage }) => {
  const navItems = [
    { name: 'Dashboard', page: 'dashboard', icon: <LayoutDashboard size={20} /> },
    { name: 'Schedule Order', page: 'schedule-order', icon: <CalendarPlus size={20} /> },
    { name: 'My Orders', page: 'my-orders', icon: <ShoppingCart size={20} /> },
    { name: 'Points', page: 'points', icon: <CreditCard size={20} /> },
    { name: 'Dining Wrapped', page: 'wrapped', icon: <TrendingUp size={20} /> },
  ];

  return (
    <nav className="bg-gray-800 text-white w-64 min-h-screen p-4 space-y-2 fixed top-0 left-0">
      <div className="text-2xl font-bold mb-8 flex items-center space-x-2">
        <Utensils size={28} className="text-indigo-400" />
        <span>Campus Bites</span>
      </div>
      {navItems.map((item) => (
        <button
          key={item.name}
          onClick={() => setCurrentPage(item.page)}
          className={`w-full flex items-center space-x-3 p-3 rounded-lg text-left hover:bg-gray-700 transition-colors ${
            currentPage === item.page ? 'bg-indigo-600 text-white' : 'text-gray-300'
          }`}
        >
          {item.icon}
          <span>{item.name}</span>
        </button>
      ))}
      <div className="absolute bottom-4 left-4 right-4 space-y-2">
        <button className="w-full flex items-center space-x-3 p-3 rounded-lg text-left text-gray-300 hover:bg-gray-700 transition-colors">
          <Settings size={20} />
          <span>Settings</span>
        </button>
        <button className="w-full flex items-center space-x-3 p-3 rounded-lg text-left text-gray-300 hover:bg-gray-700 transition-colors">
          <LogOut size={20} />
          <span>Logout</span>
        </button>
      </div>
    </nav>
  );
};

// --- components/common/Layout.tsx ---
interface LayoutProps {
  children: React.ReactNode;
  setCurrentPage: (page: string) => void;
  currentPage: string;
}
const Layout: React.FC<LayoutProps> = ({ children, setCurrentPage, currentPage }) => {
  return (
    <div className="flex min-h-screen bg-gray-100 font-inter">
      <Navbar setCurrentPage={setCurrentPage} currentPage={currentPage} />
      <main className="flex-1 p-6 sm:p-8 md:p-10 ml-64">
        {/* Header can go here */}
        <header className="mb-8 flex justify-between items-center">
            <h1 className="text-3xl font-semibold text-gray-800 capitalize">{currentPage.replace('-', ' ')}</h1>
            <div className="flex items-center space-x-4">
                <span className="text-gray-600">Welcome, Student!</span>
                <UserCircle size={32} className="text-gray-500" />
            </div>
        </header>
        {children}
      </main>
    </div>
  );
};

// --- components/common/Button.tsx ---
interface ButtonProps extends React.ButtonHTMLAttributes<HTMLButtonElement> {
  variant?: 'primary' | 'secondary' | 'danger';
  size?: 'sm' | 'md' | 'lg';
  isLoading?: boolean;
}
const Button: React.FC<ButtonProps> = ({ children, variant = 'primary', size = 'md', isLoading = false, className, ...props }) => {
  const baseStyles = "font-semibold rounded-lg focus:outline-none focus:ring-2 focus:ring-opacity-50 transition-colors duration-150 disabled:opacity-50 disabled:cursor-not-allowed flex items-center justify-center space-x-2";
  
  const variantStyles = {
    primary: "bg-indigo-600 hover:bg-indigo-700 text-white focus:ring-indigo-500",
    secondary: "bg-gray-200 hover:bg-gray-300 text-gray-800 focus:ring-gray-400",
    danger: "bg-red-500 hover:bg-red-600 text-white focus:ring-red-400",
  };

  const sizeStyles = {
    sm: "px-3 py-1.5 text-sm",
    md: "px-4 py-2 text-base",
    lg: "px-6 py-3 text-lg",
  };

  return (
    <button
      className={`${baseStyles} ${variantStyles[variant]} ${sizeStyles[size]} ${className || ''}`}
      disabled={isLoading || props.disabled}
      {...props}
    >
      {isLoading && (
        <svg className="animate-spin -ml-1 mr-2 h-5 w-5 text-white" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
          <circle className="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="4"></circle>
          <path className="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
        </svg>
      )}
      {children}
    </button>
  );
};


// --- components/points/PointsBalanceCard.tsx ---
interface PointsBalanceCardProps {
  balance: number;
}
const PointsBalanceCard: React.FC<PointsBalanceCardProps> = ({ balance }) => {
  return (
    <div className="bg-gradient-to-r from-indigo-600 to-purple-600 text-white p-6 rounded-xl shadow-lg">
      <h2 className="text-lg font-medium text-indigo-200">Current Balance</h2>
      <p className="text-4xl font-bold mt-1">
        {balance.toLocaleString('en-US', { style: 'currency', currency: 'USD' })}
      </p>
      <p className="text-sm text-indigo-200 mt-2">Available Dining Points</p>
    </div>
  );
};

// --- components/points/TransactionRow.tsx ---
interface TransactionRowProps {
  transaction: Transaction;
}
const TransactionRow: React.FC<TransactionRowProps> = ({ transaction }) => {
  const isSpend = transaction.type === 'spend';
  return (
    <tr className="border-b border-gray-200 hover:bg-gray-50">
      <td className="py-3 px-4 text-sm text-gray-700">{new Date(transaction.date).toLocaleDateString()}</td>
      <td className="py-3 px-4 text-sm text-gray-700">{transaction.description}</td>
      <td className="py-3 px-4 text-sm text-gray-700">{transaction.category}</td>
      <td className="py-3 px-4 text-sm text-gray-700">{transaction.location}</td>
      <td className={`py-3 px-4 text-sm font-medium ${isSpend ? 'text-red-600' : 'text-green-600'}`}>
        {isSpend ? '-' : '+'}
        {Math.abs(transaction.amount).toLocaleString('en-US', { style: 'currency', currency: 'USD' })}
      </td>
    </tr>
  );
};

// --- components/points/TransactionHistoryTable.tsx ---
interface TransactionHistoryTableProps {
  transactions: Transaction[];
}
const TransactionHistoryTable: React.FC<TransactionHistoryTableProps> = ({ transactions }) => {
  if (transactions.length === 0) {
    return <p className="text-gray-600 mt-4">No transactions yet.</p>;
  }
  return (
    <div className="bg-white p-6 rounded-xl shadow-lg mt-6">
      <h3 className="text-xl font-semibold text-gray-800 mb-4">Transaction History</h3>
      <div className="overflow-x-auto">
        <table className="w-full min-w-max">
          <thead>
            <tr className="bg-gray-100 text-left text-xs font-semibold text-gray-600 uppercase tracking-wider">
              <th className="py-3 px-4">Date</th>
              <th className="py-3 px-4">Description</th>
              <th className="py-3 px-4">Category</th>
              <th className="py-3 px-4">Location</th>
              <th className="py-3 px-4">Amount</th>
            </tr>
          </thead>
          <tbody className="divide-y divide-gray-200">
            {transactions.map((tx) => (
              <TransactionRow key={tx.id} transaction={tx} />
            ))}
          </tbody>
        </table>
      </div>
    </div>
  );
};

// --- pages/points.tsx ---
const PointsPage: React.FC = () => {
  const [pointsData, setPointsData] = useState<PointsData | null>(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);

  useEffect(() => {
    const fetchData = async () => {
      try {
        setLoading(true);
        setError(null);
        const data = await mockPointsAPI.getPointsData();
        setPointsData(data);
      } catch (err) {
        setError("Failed to load points data. Please try again.");
        console.error(err);
      } finally {
        setLoading(false);
      }
    };
    fetchData();
  }, []);

  if (loading) {
    return (
        <div className="flex justify-center items-center h-64">
            <svg className="animate-spin h-10 w-10 text-indigo-600" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
              <circle className="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="4"></circle>
              <path className="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
            </svg>
            <span className="ml-3 text-gray-700">Loading points data...</span>
        </div>
    );
  }
  if (error) {
    return <div className="bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded-lg relative" role="alert">{error}</div>;
  }
  if (!pointsData) {
    return <p className="text-gray-600">No data available.</p>;
  }

  return (
    <div className="space-y-6">
      <PointsBalanceCard balance={pointsData.currentBalance} />
      <TransactionHistoryTable transactions={pointsData.transactions} />
    </div>
  );
};

// --- components/order/OrderForm.tsx ---
interface OrderFormProps {
  onOrderSubmit: (order: Omit<Order, 'id' | 'status'>) => Promise<void>;
}
const OrderForm: React.FC<OrderFormProps> = ({ onOrderSubmit }) => {
  const [itemName, setItemName] = useState('');
  const [quantity, setQuantity] = useState(1);
  const [pickupLocation, setPickupLocation] = useState('Main Cafeteria');
  const [scheduledTime, setScheduledTime] = useState(''); // Should be datetime-local input
  const [isSubmitting, setIsSubmitting] = useState(false);
  const [submitMessage, setSubmitMessage] = useState<string | null>(null);

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    if (!itemName || quantity < 1 || !pickupLocation || !scheduledTime) {
        setSubmitMessage("Please fill in all fields.");
        return;
    }
    setIsSubmitting(true);
    setSubmitMessage(null);
    try {
        await onOrderSubmit({ itemName, quantity, pickupLocation, scheduledTime });
        setSubmitMessage("Order submitted successfully!");
        setItemName('');
        setQuantity(1);
        // setScheduledTime(''); // Keep or clear based on preference
    } catch (error) {
        setSubmitMessage("Failed to submit order. Please try again.");
        console.error(error);
    } finally {
        setIsSubmitting(false);
    }
  };

  return (
    <form onSubmit={handleSubmit} className="bg-white p-6 sm:p-8 rounded-xl shadow-lg space-y-6">
      <h3 className="text-xl font-semibold text-gray-800 mb-4">Create New Order</h3>
      
      <div>
        <label htmlFor="itemName" className="block text-sm font-medium text-gray-700 mb-1">Item Name</label>
        <input
          type="text"
          id="itemName"
          value={itemName}
          onChange={(e) => setItemName(e.target.value)}
          required
          className="w-full px-3 py-2 border border-gray-300 rounded-lg shadow-sm focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:border-indigo-500"
          placeholder="e.g., Chicken Caesar Salad"
        />
      </div>

      <div>
        <label htmlFor="quantity" className="block text-sm font-medium text-gray-700 mb-1">Quantity</label>
        <input
          type="number"
          id="quantity"
          value={quantity}
          onChange={(e) => setQuantity(Math.max(1, parseInt(e.target.value, 10)))}
          min="1"
          required
          className="w-full px-3 py-2 border border-gray-300 rounded-lg shadow-sm focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:border-indigo-500"
        />
      </div>

      <div>
        <label htmlFor="pickupLocation" className="block text-sm font-medium text-gray-700 mb-1">Pickup Location</label>
        <select
          id="pickupLocation"
          value={pickupLocation}
          onChange={(e) => setPickupLocation(e.target.value)}
          required
          className="w-full px-3 py-2 border border-gray-300 rounded-lg shadow-sm focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:border-indigo-500 bg-white"
        >
          <option>Main Cafeteria</option>
          <option>Cafe Bytes</option>
          <option>Pizza Spot</option>
          <option>Library Cafe</option>
        </select>
      </div>

      <div>
        <label htmlFor="scheduledTime" className="block text-sm font-medium text-gray-700 mb-1">Scheduled Pickup Time</label>
        <input
          type="datetime-local"
          id="scheduledTime"
          value={scheduledTime}
          onChange={(e) => setScheduledTime(e.target.value)}
          required
          className="w-full px-3 py-2 border border-gray-300 rounded-lg shadow-sm focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:border-indigo-500"
          min={new Date().toISOString().slice(0, 16)} // Prevent past dates
        />
      </div>
      
      <Button type="submit" variant="primary" size="lg" isLoading={isSubmitting} className="w-full">
        {isSubmitting ? 'Submitting...' : 'Schedule Order'}
      </Button>
      
      {submitMessage && (
        <p className={`text-sm mt-2 ${submitMessage.includes("success") ? 'text-green-600' : 'text-red-600'}`}>
          {submitMessage}
        </p>
      )}
    </form>
  );
};

// --- pages/schedule-order.tsx ---
const ScheduleOrderPage: React.FC = () => {
  const handleOrderSubmit = async (newOrderData: Omit<Order, 'id' | 'status'>) => {
    // In a real app, you might want to update a list of orders or navigate
    console.log("New order submitted:", newOrderData);
    const scheduledOrder = await mockOrdersAPI.scheduleNewOrder(newOrderData);
    console.log("API Response (mock):", scheduledOrder);
    // Potentially add to a local state list of orders or trigger a refetch
  };

  return (
    <div className="max-w-2xl mx-auto">
      <OrderForm onOrderSubmit={handleOrderSubmit} />
      {/* Future: Display a list of recently scheduled orders here */}
    </div>
  );
};

// --- components/order/ScheduledOrderItem.tsx ---
interface ScheduledOrderItemProps {
  order: Order;
}
const ScheduledOrderItem: React.FC<ScheduledOrderItemProps> = ({ order }) => {
  const getStatusColor = (status: Order['status']) => {
    switch (status) {
      case 'Pending': return 'bg-yellow-100 text-yellow-800';
      case 'Confirmed': return 'bg-blue-100 text-blue-800';
      case 'Ready': return 'bg-green-100 text-green-800';
      case 'Picked Up': return 'bg-gray-100 text-gray-800';
      case 'Cancelled': return 'bg-red-100 text-red-800';
      default: return 'bg-gray-100 text-gray-800';
    }
  };

  return (
    <div className="bg-white p-4 rounded-lg shadow hover:shadow-md transition-shadow">
      <div className="flex justify-between items-start">
        <div>
          <h4 className="font-semibold text-gray-800">{order.itemName} (x{order.quantity})</h4>
          <p className="text-sm text-gray-600">Pickup: {order.pickupLocation}</p>
        </div>
        <span className={`text-xs font-medium px-2.5 py-0.5 rounded-full ${getStatusColor(order.status)}`}>
          {order.status}
        </span>
      </div>
      <p className="text-sm text-gray-500 mt-2">
        Scheduled for: {new Date(order.scheduledTime).toLocaleString()}
      </p>
      {/* Add cancel/modify buttons if needed */}
    </div>
  );
};

// --- pages/my-orders.tsx ---
const MyOrdersPage: React.FC = () => {
  const [orders, setOrders] = useState<Order[]>([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);

  useEffect(() => {
    const fetchOrders = async () => {
      try {
        setLoading(true);
        setError(null);
        const fetchedOrders = await mockOrdersAPI.getScheduledOrders();
        setOrders(fetchedOrders.sort((a, b) => new Date(a.scheduledTime).getTime() - new Date(b.scheduledTime).getTime()));
      } catch (err) {
        setError("Failed to load orders.");
        console.error(err);
      } finally {
        setLoading(false);
      }
    };
    fetchOrders();
  }, []);

  if (loading) return <div className="text-center p-8">Loading your orders...</div>;
  if (error) return <div className="text-red-500 text-center p-8">{error}</div>;

  return (
    <div className="space-y-6">
      {orders.length === 0 ? (
        <p className="text-gray-600 text-center py-10">You have no scheduled orders.</p>
      ) : (
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
          {orders.map(order => <ScheduledOrderItem key={order.id} order={order} />)}
        </div>
      )}
    </div>
  );
};


// --- components/wrapped/StatCard.tsx ---
interface StatCardProps {
  stat: WrappedStat;
}
const StatCard: React.FC<StatCardProps> = ({ stat }) => {
  return (
    <div className="bg-white p-6 rounded-xl shadow-lg flex flex-col items-center text-center transform hover:scale-105 transition-transform duration-200">
      {stat.icon && <div className="text-indigo-500 mb-3">{stat.icon}</div>}
      <h3 className="text-2xl font-bold text-gray-800">{stat.value}</h3>
      <p className="text-md font-medium text-indigo-600">{stat.title}</p>
      {stat.description && <p className="text-sm text-gray-500 mt-1">{stat.description}</p>}
    </div>
  );
};

// --- pages/wrapped.tsx ---
const WrappedPage: React.FC = () => {
  const [wrappedData, setWrappedData] = useState<DiningWrappedData | null>(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const [currentStep, setCurrentStep] = useState(0); // For animating through stats

  useEffect(() => {
    const fetchData = async () => {
      try {
        setLoading(true);
        setError(null);
        const data = await mockWrappedAPI.getDiningWrappedData();
        setWrappedData(data);
      } catch (err) {
        setError("Failed to load your dining wrapped data.");
      } finally {
        setLoading(false);
      }
    };
    fetchData();
  }, []);

  if (loading) return <div className="text-center p-10">Generating your Dining Wrapped... ✨</div>;
  if (error) return <div className="text-red-500 text-center p-10">{error}</div>;
  if (!wrappedData) return <div className="text-center p-10">No wrapped data available.</div>;

  // Simple animation for showing stats one by one
  const displayedStats = wrappedData.stats.slice(0, currentStep + 1);
  useEffect(() => {
    if (currentStep < wrappedData.stats.length -1) {
        const timer = setTimeout(() => setCurrentStep(s => s + 1), 1500); // Show a new stat every 1.5s
        return () => clearTimeout(timer);
    }
  }, [currentStep, wrappedData.stats.length]);


  return (
    <div className="space-y-8 text-center">
      <h2 className="text-4xl font-bold text-transparent bg-clip-text bg-gradient-to-r from-purple-500 via-pink-500 to-red-500">
        Your Campus Dining Wrapped!
      </h2>
      <p className="text-lg text-gray-600">Here's a look back at your dining habits.</p>
      
      <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-6 pt-6">
        {displayedStats.map((stat, index) => (
          <div key={index} className="animate-fadeIn"> {/* Simple fade-in animation */}
            <StatCard stat={stat} />
          </div>
        ))}
      </div>
      
      {currentStep < wrappedData.stats.length - 1 && (
         <p className="text-gray-500 mt-8">More insights loading...</p>
      )}
      {currentStep === wrappedData.stats.length - 1 && (
        <div className="mt-10 animate-fadeIn">
            <p className="text-xl text-gray-700">Thanks for dining with us!</p>
            <Button variant="primary" size="lg" className="mt-4" onClick={() => setCurrentStep(0)}>
                Replay Wrapped
            </Button>
        </div>
      )}
      {/* Placeholder for charts - Recharts would be good here */}
      {/* <div className="bg-white p-6 rounded-xl shadow-lg mt-8">
        <h3 className="text-xl font-semibold text-gray-800 mb-4">Spending by Category (Placeholder)</h3>
        <div className="h-64 bg-gray-200 rounded flex items-center justify-center text-gray-500">
          Chart would go here
        </div>
      </div> */}
       <style jsx global>{`
        .animate-fadeIn {
          animation: fadeIn 0.8s ease-out forwards;
        }
        @keyframes fadeIn {
          from { opacity: 0; transform: translateY(20px); }
          to { opacity: 1; transform: translateY(0); }
        }
      `}</style>
    </div>
  );
};

// --- pages/index.tsx (Dashboard/Home Page) ---
const DashboardPage: React.FC<{ setCurrentPage: (page: string) => void }> = ({ setCurrentPage }) => {
  // In a real app, this might fetch summary data
  const [summary, setSummary] = useState({
    points: 1250.75, // Mock
    upcomingOrders: 2, // Mock
  });

  return (
    <div className="space-y-8">
      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
        <div className="bg-white p-6 rounded-xl shadow-lg cursor-pointer hover:shadow-indigo-100" onClick={() => setCurrentPage('points')}>
          <div className="flex items-center text-indigo-600 mb-2">
            <CreditCard size={24} className="mr-2"/>
            <h3 className="text-xl font-semibold">My Points</h3>
          </div>
          <p className="text-3xl font-bold text-gray-800">{summary.points.toLocaleString('en-US', { style: 'currency', currency: 'USD' })}</p>
          <p className="text-sm text-gray-500">View transaction history</p>
        </div>

        <div className="bg-white p-6 rounded-xl shadow-lg cursor-pointer hover:shadow-indigo-100" onClick={() => setCurrentPage('my-orders')}>
          <div className="flex items-center text-indigo-600 mb-2">
            <ShoppingCart size={24} className="mr-2"/>
            <h3 className="text-xl font-semibold">Upcoming Orders</h3>
          </div>
          <p className="text-3xl font-bold text-gray-800">{summary.upcomingOrders}</p>
          <p className="text-sm text-gray-500">Manage your scheduled orders</p>
        </div>
      </div>

      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
         <div className="bg-white p-6 rounded-xl shadow-lg cursor-pointer hover:shadow-indigo-100" onClick={() => setCurrentPage('schedule-order')}>
          <div className="flex items-center text-green-600 mb-2">
            <CalendarPlus size={24} className="mr-2"/>
            <h3 className="text-xl font-semibold">Schedule New Order</h3>
          </div>
          <p className="text-gray-600 mt-2">Plan your meals ahead and skip the line. Easy and convenient.</p>
        </div>
        <div className="bg-white p-6 rounded-xl shadow-lg cursor-pointer hover:shadow-indigo-100" onClick={() => setCurrentPage('wrapped')}>
          <div className="flex items-center text-purple-600 mb-2">
            <TrendingUp size={24} className="mr-2"/>
            <h3 className="text-xl font-semibold">Dining Wrapped</h3>
          </div>
          <p className="text-gray-600 mt-2">Discover your unique dining habits and see your year in review!</p>
        </div>
      </div>
    </div>
  );
};


// --- _app.tsx (Conceptual Root Component) ---
// This AppWrapper simulates the behavior of Next.js pages and _app.tsx
const AppWrapper = () => {
  const [currentPage, setCurrentPage] = useState('dashboard'); // Default page

  const renderPage = () => {
    switch (currentPage) {
      case 'dashboard':
        return <DashboardPage setCurrentPage={setCurrentPage} />;
      case 'schedule-order':
        return <ScheduleOrderPage />;
      case 'my-orders':
        return <MyOrdersPage />;
        case 'points':
        return <PointsPage />;
      case 'wrapped':
        return <WrappedPage />;
      default:
        return <DashboardPage setCurrentPage={setCurrentPage} />;
    }
  };

  return (
    // In a real Next.js app, Tailwind's globals.css would be imported in _app.tsx
    // <div className="font-inter"> {/* Ensure Inter font is applied if not globally */}
      <Layout setCurrentPage={setCurrentPage} currentPage={currentPage}>
        {renderPage()}
      </Layout>
    // </div>
  );
};

// Default export for the immersive environment
export default AppWrapper;

// To make this runnable in a typical React setup (like CodeSandbox or a local CRA),
// you would need to ensure Tailwind CSS is configured.
// For Next.js, you'd create files in the specified directories.
// e.g., pages/_app.tsx would contain:
// import '../styles/globals.css'; // For Tailwind
// import type { AppProps } from 'next/app';
// function MyApp({ Component, pageProps }: AppProps) {
//   return <Component {...pageProps} />
// }
// export default MyApp;
// And `pages/index.tsx` would export one of the page components.
// The Layout component would typically wrap <Component {...pageProps} /> in _app.tsx.
